name: Benchmark

on:
  workflow_call:
    inputs:
      branch:
        description: "GitHub branch name to run benchmark."
        required: true
        type: string
      dotnet-version:
        description: ".NET SDK Version to use"
        required: true
        type: string
      environment:
        description: "Environment to run benchmark."
        required: false
        type: string
        default: "benchmark"
      client-args-format:
        description: "Benchmark client's argument format. {0} will inject the server's Hostname."
        required: false
        type: string
        default: ""
      client-env-settings:
        description: "Benchmark client's Environment settings."
        required: false
        type: string
        default: ""
      client-csproj:
        description: "Benchmark client's csproj path to run. (e.g. perf/BenchmarkApp/PerformanceTest.Client/PerformanceTest.Client.csproj)" # path is relative from the root of the repository
        required: true
        type: string
      server-args:
        description: "Benchmark server's argument"
        required: false
        type: string
        default: ""
      server-env-settings:
        description: "Benchmark server's Environment settings. (e.g. ASPNETCORE_ENVIRONMENT=Production)"
        required: false
        type: string
        default: ""
      server-csproj:
        description: "Benchmark server's csproj path to run. (e.g. perf/BenchmarkApp/PerformanceTest.Server/PerformanceTest.Server.csproj)" # path is relative from the root of the repository
        required: true
        type: string

env:
  BUILD_CONFIG: Release
  BENCHMARK_SERVER_NAME: benchmark-server-vm
  BENCHMARK_CLIENT_NAME: benchmark-client-vm
  BENCHMARK_RESOURCE_GROUP: BenchmarkTest

permissions:
  contents: read
  id-token: write

jobs:
  # is actor is benchmarkable
  verify:
    outputs:
      is-benchmarkable: ${{ steps.is-benchmarkable.outputs.authorized }} # true or false
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Check actor is benchmarkable
        id: is-benchmarkable
        uses: Cysharp/Actions/.github/actions/check-benchmarkable@main
        with:
          username: ${{ github.actor }}

  # run benchmark
  benchmark:
    needs: [verify]
    if: ${{ needs.verify.outputs.is-benchmarkable == 'true' }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "Cysharp/Actions"
      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PUBLIC }}
          SSH_KEY: "op://GitHubActionsPublic/BENCHMARK_VM_SSH/private key"
          AZURE_OIDC_CLIENTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/clientId"
          AZURE_OIDC_TENANTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/tenantId"
          AZURE_OIDC_SUBSCRIPTIONID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/subscriptionId"
      - name: Output SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ steps.op-load-secret.outputs.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
      - uses: azure/login@v2
        with:
          client-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_CLIENTID }}
          tenant-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_TENANTID }}
          subscription-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_SUBSCRIPTIONID }}
      - name: Start Benchmark VM
        run: |
          for vm in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState!='VM running'].name" -o tsv); do
            az vm start --name "$vm" --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}"
          done
      - name: Setup .NET on Benchmark VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --dotnet-version ${{ inputs.dotnet-version }}' < ./scripts/dotnet_install.sh
            echo "::endgroup::"
          done
        working-directory: ./.github
      - name: Run Benchmark Server
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_SERVER_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --args "${{ inputs.server-args }}" --branch "${{ inputs.branch }}" --build-csproj "${{ inputs.server-csproj }}" --env-settings "${{ inputs.server-env-settings }}" --owner "${{ github.repository_owner }}" --repo "${{ github.event.repository.name }}"' < ./scripts/run_benchmark.sh &
          done
          # wait until server started
          sleep 120s
        working-directory: ./.github
      - name: Run Benchmark Client
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_CLIENT_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --args "${{ format(inputs.client-args-format, env.BENCHMARK_SERVER_NAME) }}" --branch "${{ inputs.branch }}" --build-csproj "${{ inputs.client-csproj }}" --env-settings "${{ inputs.client-env-settings }}" --owner "${{ github.repository_owner }}" --repo "${{ github.event.repository.name }}"' < ./scripts/run_benchmark.sh
          done
        working-directory: ./.github
      - name: Stop (Deallocate) Benchmark VM
        if: always()
        run: |
          for vm in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].name" -o tsv); do
            az vm deallocate --name "$vm" --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --no-wait
          done
      # TODO: Add a step to collect benchmark results
      # TODO: Add a step to post benchmark results to GitHub
