name: Benchmark

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: ".NET SDK Version to use"
        required: true
        type: string
      environment:
        description: "Environment to run benchmark."
        required: false
        type: string
        default: "benchmark"
      benchmark-catalog:
        description: "Benchmark catalog name"
        required: false
        type: string
        default: "pulumi"
      benchmark-definition-name:
        description: "Benchmark catalog's definition name"
        required: false
        type: string
        default: "Benchmark"
      benchmark-devcenter:
        description: "Benchmark devcenter name"
        required: false
        type: string
        default: "cysharp-devcenter"
      benchmark-environment:
        description: "Benchmark environment name"
        required: false
        type: string
        default: "benchmark"
      benchmark-name:
        description: "Name of the benchamrk environment."
        required: true
        type: string
      benchmark-project:
        description: "Benchmark project name"
        required: false
        type: string
        default: "dve"
      benchmark-timeout:
        description: "Benchmark timeout minutes, 10m (developer environment require) + clone time + benchmark time = 15~20 < N < 30"
        required: false
        type: string
        default: "20"
      client-benchmark-script-path:
        description: "Path to the benchmark script."
        required: false
        type: string
        default: ".github/scripts/run_benchmark.sh"
      client-benchmark-script-args:
        description: "Arguments to the client benchmark script."
        required: false
        type: string
        default: ""
      server-benchmark-script-path:
        description: "Path to the benchmark script."
        required: false
        type: string
        default: ".github/scripts/run_benchmark.sh"
      server-benchmark-script-args:
        description: "Arguments to the server benchmark script."
        required: false
        type: string
        default: ""

env:
  BUILD_CONFIG: Release
  BENCHMARK_SERVER_NAME: "${{ inputs.benchmark-name }}-bench-server-vm"
  BENCHMARK_CLIENT_NAME: "${{ inputs.benchmark-name }}-bench-client-vm"
  BENCHMARK_RESOURCE_GROUP: "${{ inputs.benchmark-project }}-${{ inputs.benchmark-name }}"
  GH_REPO: ${{ github.repository }} # gh cli handling
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli handling

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  # is actor is benchmarkable
  verify:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/benchmark')) || github.event_name == 'push' || github.event_name == 'pull_request' }}
    outputs:
      is-benchmarkable: ${{ steps.is-benchmarkable.outputs.authorized }} # true or false
      branch: ${{ steps.branch.outputs.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Check actor is benchmarkable
        id: is-benchmarkable
        uses: Cysharp/Actions/.github/actions/benchmark-runnable@main
        with:
          username: ${{ github.actor }}
      - name: Add request receive reaction
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" -f "content=+1"
      - name: Get branch name to checkout
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" && "${{ github.event.issue.pull_request.html_url }}" != "" ]]; then
            # issue_comment (pull_request)
            branch=$(gh pr view "${{ github.event.issue.pull_request.html_url }}"  --json headRefName | jq -r ".headRefName")
            echo "name=${branch}" | tee -a "$GITHUB_OUTPUT"
          else
            # workflow_dispatch or issue_comment (issue)
            echo "name=${{ github.ref_name }}" | tee -a "$GITHUB_OUTPUT"
          fi
      - name: Comment (Running - Auth OK)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Authorization complete, creating benchmark environment. :+1:"
          state: "running"
          title: "Successfully begin benchmark"
          update: "false"
        if: ${{ steps.is-benchmarkable.outputs.authorized == 'true' }}
      - name: Comment (Failed - Auth NG)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Authorization failed, You are not authorized to run benchmark. :warning:"
          state: "failed"
          title: "Failed to begin benchmark"
          update: "false"
        if: ${{ steps.is-benchmarkable.outputs.authorized == 'false' }}

  # run benchmark
  benchmark:
    needs: [verify]
    if: ${{ needs.verify.outputs.is-benchmarkable == 'true' }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify.outputs.branch }}
          path: Repo
      - uses: actions/checkout@v4
        with:
          repository: "Cysharp/Actions"
          path: Actions
      - name: List checkout repos
        run: ls -l
      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PUBLIC }}
          SSH_KEY: "op://GitHubActionsPublic/BENCHMARK_VM_SSH/private key"
          AZURE_OIDC_CLIENTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/clientId"
          AZURE_OIDC_TENANTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/tenantId"
          AZURE_OIDC_SUBSCRIPTIONID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/subscriptionId"
      - name: Output SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ steps.op-load-secret.outputs.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
      - uses: azure/login@v2
        with:
          client-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_CLIENTID }}
          tenant-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_TENANTID }}
          subscription-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_SUBSCRIPTIONID }}
      - name: Add Azure CLI devcenter extension
        run: az extension add --name devcenter --upgrade
      - name: Create benchmark environment
        id: create-benchmark
        run: bash ./scripts/create_benchmark_environment.sh --catalog-name '${{ inputs.benchmark-catalog }}' --dev-center-name '${{ inputs.benchmark-devcenter }}' --environment-definition-name '${{ inputs.benchmark-definition-name }}' --environment-type '${{ inputs.benchmark-environment }}' --name '${{ inputs.benchmark-name }}' --project-name '${{ inputs.benchmark-project }}' --minutes "${{ inputs.benchmark-timeout }}" --dry-run false
        working-directory: ./Actions/.github
      - name: Comment (Progess - Benchmark environment)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark environment creation complete, start preparing server & client. :clock1:"
          state: "running"
          title: "Benchmark environment created"
          update: "true"
      - name: Setup .NET on Benchmark VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --dotnet-version ${{ inputs.dotnet-version }}' < ./scripts/dotnet_install.sh
            echo "::endgroup::"
          done
        working-directory: ./Actions/.github
      - name: Clone repository on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --branch "${{ needs.verify.outputs.branch }}" --owner "${{ github.repository_owner }}" --repo "${{ github.event.repository.name }}"' < ./scripts/git_clone.sh
            echo "::endgroup::"
          done
        working-directory: ./Actions/.github
      - name: Comment (Progress - Server begin)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Repository successfully prepared, starting server. :clock3:"
          state: "running"
          title: "Benchmark begin"
          update: "true"
      - name: Run benchmark server on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_SERVER_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- ${{ inputs.server-benchmark-script-args }}' < ${{ inputs.server-benchmark-script-path}}
          done
        working-directory: ./Repo/
      - name: Comment (Progress - Benchmark begin)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Server successfully started, starting benchmark. :clock6:"
          state: "running"
          title: "Benchmark begin"
          update: "true"
      - name: Run benchmark client on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_CLIENT_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s --  ${{ inputs.client-benchmark-script-args }}' < ${{ inputs.client-benchmark-script-path}}
          done
        working-directory: ./Repo/
      - name: Comment (Result - Benchmark complete)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: |
            Successfully complete Benchmark. :rocket:

            Benchmark settings:
            ```
            client-args: ${{ inputs.client-benchmark-script-args }}
            server-args: ${{ inputs.server-benchmark-script-args }}
            ```

            Benchmark environment expiration: ${{ inputs.benchmark-timeout}}min (Until ${{ steps.create-benchmark.outputs.expiration }} UTC)
          state: "success"
          title: "Benchmark completed"
          update: "true"
      - name: Comment (Result - Benchmark failed)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark failed :warning:"
          state: "failed"
          title: "Benchmark failed"
          update: "true"
        if: ${{ github.event.issue.number && failure() }}
      # TODO: Add a step to collect benchmark results
      # TODO: Add a step to post benchmark results to GitHub
