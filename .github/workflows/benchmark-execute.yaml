name: (R) Benchmark Execute

on:
  workflow_call:
    inputs:
      # required
      benchmark-name:
        description: "Name of the benchamrk environment."
        required: true
        type: string
      benchmark-config-path:
        description: "Benchmark config yaml file path"
        required: true
        type: string
      # optional
      benchmark-catalog:
        description: "Benchmark catalog name"
        required: false
        type: string
        default: "pulumi"
      benchmark-definition-name:
        description: "Benchmark catalog's definition name"
        required: false
        type: string
        default: "Benchmark"
      benchmark-devcenter:
        description: "Benchmark devcenter name"
        required: false
        type: string
        default: "ade-devcenter-jp"
      benchmark-environment:
        description: "Benchmark environment name"
        required: false
        type: string
        default: "benchmark"
      benchmark-project:
        description: "Benchmark project name"
        required: false
        type: string
        default: "ade-project-jp"

env:
  BUILD_CONFIG: Release
  BENCHMARK_SERVER_NAME: "${{ inputs.benchmark-name }}-bench-server-vm"
  BENCHMARK_CLIENT_NAME: "${{ inputs.benchmark-name }}-bench-client-vm"
  BENCHMARK_RESOURCE_GROUP: "${{ inputs.benchmark-project }}-${{ inputs.benchmark-name }}"
  GH_REPO: ${{ github.repository }} # gh cli handling
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli handling

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  # is actor is benchmarkable
  verify:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/benchmark')) || github.event_name == 'push' || github.event_name == 'pull_request' }}
    outputs:
      is-benchmarkable: ${{ steps.is-benchmarkable.outputs.authorized }} # true or false
      branch: ${{ steps.branch.outputs.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Check actor is benchmarkable
        id: is-benchmarkable
        uses: Cysharp/Actions/.github/actions/benchmark-runnable@main
        with:
          username: ${{ github.actor }}
      - name: Add request receive reaction
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" -f "content=+1"
        if: ${{ github.event.issue.number }}
      - name: Get branch name to checkout
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" && "${{ github.event.issue.pull_request.html_url }}" != "" ]]; then
            # issue_comment (pull_request)
            branch=$(gh pr view "${{ github.event.issue.pull_request.html_url }}"  --json headRefName | jq -r ".headRefName")
            echo "name=${branch}" | tee -a "$GITHUB_OUTPUT"
          else
            # workflow_dispatch or issue_comment (issue)
            echo "name=${{ github.ref_name }}" | tee -a "$GITHUB_OUTPUT"
          fi
      - name: Comment (Running - Auth Result)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: ${{ steps.is-benchmarkable.outputs.authorized == 'true' && 'Benchmark request accepted, creating benchmark environment. :clock1:' || 'Benchmark request rejected, you are not authorized to run benchmark. :warning:'}}
          state: ${{ steps.is-benchmarkable.outputs.authorized == 'true' && 'running' || 'failed' }}
          title: ${{ steps.is-benchmarkable.outputs.authorized == 'true' && 'Successfully begin benchmark' || 'Failed to begin benchmark' }}
          update: "false"

  config_to_matrix:
    needs: [verify]
    if: ${{ needs.verify.outputs.is-benchmarkable == 'true' }}
    outputs:
      branch: ${{ needs.verify.outputs.branch }}
      matrix: ${{ steps.config2matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify.outputs.branch }}
          path: Repo
      - uses: actions/checkout@v4
        with:
          repository: "Cysharp/Actions"
          path: Actions
      - name: Generate Matrix json from config
        id: config2matrix
        run: bash ./Actions/.github/scripts/benchmark_config2matrix.sh --benchmark-config-path "./Repo/${{ inputs.benchmark-config-path }}"
      - name: Comment (Running - Config loaded)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark config successfully loaded and start matrix. :clock1:"
          state: "running"
          title: "Benchmark config loaded"
          update: "true"

  # run benchmark
  benchmark:
    needs: [config_to_matrix]
    strategy:
      max-parallel: 1 # do not run concurrently
      fail-fast: true # stop if fail
      matrix: ${{ fromJson(needs.config_to_matrix.outputs.matrix) }}
    environment:
      name: benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Dump matrix
        run: echo "${{ toJson(matrix) }}"
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.config_to_matrix.outputs.branch }}
          path: Repo
      - uses: actions/checkout@v4
        with:
          repository: "Cysharp/Actions"
          path: Actions
      - name: List checkout repos
        run: ls -l
      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PUBLIC }}
          SSH_KEY: "op://GitHubActionsPublic/BENCHMARK_VM_SSH/private key"
          AZURE_OIDC_CLIENTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/clientId"
          AZURE_OIDC_TENANTID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/tenantId"
          AZURE_OIDC_SUBSCRIPTIONID: "op://GitHubActionsPublic/BENCHMARK_AZURE_OIDC/subscriptionId"
      - name: Output SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ steps.op-load-secret.outputs.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
      - uses: azure/login@v2
        with:
          client-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_CLIENTID }}
          tenant-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_TENANTID }}
          subscription-id: ${{ steps.op-load-secret.outputs.AZURE_OIDC_SUBSCRIPTIONID }}
      - name: Add Azure CLI devcenter extension
        run: az extension add --name devcenter --upgrade
      - name: Create benchmark environment
        id: create-benchmark
        run: bash ./scripts/benchmark_environment_create.sh --catalog-name '${{ inputs.benchmark-catalog }}' --dev-center-name '${{ inputs.benchmark-devcenter }}' --environment-definition-name '${{ inputs.benchmark-definition-name }}' --environment-type '${{ inputs.benchmark-environment }}' --location '${{ matrix.benchmark-location }}' --name '${{ inputs.benchmark-name }}' --project-name '${{ inputs.benchmark-project }}' --expire-min "${{ matrix.benchmark-expire-min }}" --dry-run false
        working-directory: ./Actions/.github
      - name: Comment (Progess - Benchmark environment)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark environment creation complete, start preparing server & client. :clock3:"
          state: "running"
          title: "Benchmark environment created"
          update: "true"
      - name: Setup .NET on Benchmark VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --dotnet-version ${{ matrix.dotnet-version }}' < ./scripts/dotnet_install.sh
            echo "::endgroup::"
          done
        working-directory: ./Actions/.github
      - name: Setup apt tools on Benchmark VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --tools "${{ matrix.apt-tools }}"' < ./scripts/apt_install.sh
            echo "::endgroup::"
          done
        working-directory: ./Actions/.github
      - name: Clone repository on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running'].publicIps" -o tsv); do
            echo "::group::Install on $ip"
              ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- --branch "${{ needs.config_to_matrix.outputs.branch }}" --owner "${{ github.repository_owner }}" --repo "${{ github.event.repository.name }}"' < ./scripts/git_clone.sh
            echo "::endgroup::"
          done
        working-directory: ./Actions/.github
      - name: Comment (Progress - Server begin)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Repository successfully prepared, starting server. :clock6:"
          state: "running"
          title: "Benchmark begin"
          update: "true"
      - name: Run benchmark server on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_SERVER_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- ${{ matrix.benchmark-server-run-script-args }}' < ${{ matrix.benchmark-server-run-script-path }}
          done
        working-directory: ./Repo/
      - name: Comment (Progress - Benchmark begin)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Server successfully started, starting benchmark. :clock9:"
          state: "running"
          title: "Benchmark begin"
          update: "true"
      - name: Run benchmark client on VM
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_CLIENT_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- ${{ matrix.benchmark-client-run-script-args }}' < ${{ matrix.benchmark-client-run-script-path }}
          done
        working-directory: ./Repo/
        timeout-minutes: ${{ matrix.benchmark-timeout-min }}
        continue-on-error: true # continue next benchmark even benchmark failed for this job
      - name: Stop benchmark server on VM
        if: ${{ matrix.benchmark-server-stop-script-path != '' }}
        run: |
          for ip in $(az vm list -d --resource-group "${{ env.BENCHMARK_RESOURCE_GROUP }}" --query "[?powerState=='VM running' && name=='${{ env.BENCHMARK_SERVER_NAME }}'].publicIps" -o tsv); do
            ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 azure-user@"$ip" 'bash -s -- ${{ matrix.benchmark-server-run-script-args }}' < ${{ matrix.benchmark-server-stop-script-path }}
          done
        working-directory: ./Repo/
      - name: Comment (Result - Benchmark complete)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: |
            Successfully complete Benchmark. :rocket:

            Benchmark settings:
            ```
            client-args: ${{ matrix.benchmark-client-run-script-args }}
            server-args: ${{ matrix.benchmark-server-run-script-args }}
            ```

            Benchmark environment expiration: ${{ matrix.benchmark-expire-min}}min (Until ${{ steps.create-benchmark.outputs.expiration }} UTC)
          state: "success"
          title: "Benchmark completed"
          update: "true"
      - name: Comment (Result - Benchmark failed)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark failed :x:"
          state: "failed"
          title: "Benchmark failed"
          update: "true"
        if: ${{ failure() }}
      - name: Comment (Result - Benchmark cancelled)
        uses: Cysharp/Actions/.github/actions/benchmark-progress-comment@main
        with:
          comment: "Benchmark workflow was cancelled :octocat:"
          state: "cancelled"
          title: "Benchmark cancelled"
          update: "true"
        if: ${{ cancelled() }}
